name: "develop - Deploy infra"

on:
  pull_request:
    branches:
      - develop
    types: [opened, synchronize]
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write
  #issues: write

env:
  # Possible values: https://developer.hashicorp.com/terraform/internals/debugging
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  S3_BUCKET_TF_STATE: "develop-test-llm-terraform-state"
  TF_STATE_FILE: "vpc-eks.tfstate"
  AWS_REGION: "us-east-1"
  TERRAFORM_VERSION: "1.7.0"
  ENVIRONMENT: develop
  EKS_CLUSTER_NAME: develop-eks-cluster
  AWS_LOAD_BALANCER_CONTROLLER_CHART_VERSION: "1.7.2"
  ISTIO_CHART_VERSION: "1.20.0"

jobs:
  # Deploy the VPC and the EKS cluster
  deploy_vpc_and_eks:
    name: "Deploy VPC and EKS cluster"
    runs-on: ubuntu-latest
    #environment: $ENVIRONMENT
    defaults:
      run:
        working-directory: terraform-code/vpc-eks
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: $TERRAFORM_VERSION
      
      - name: Install checkov
        run: pip install checkov    

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config "bucket=$S3_BUCKET_TF_STATE" \
            -backend-config "key=$TF_STATE_FILE"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Fetch variable file infra.tfvars from CONFIG REPO
        uses: actions/checkout@v2
        with:
          repository: "luisllm/environments"
          ref: develop # or specify the branch, tag, or commit hash where the file resides
          path: "./environments"
      
      - name: Print variable file infra.tfvars coming from CONFIG REPO
        run: cat ../../environments/tf-config/infra.tfvars
         
      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -var-file="../../environments/tf-config/infra.tfvars" -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Run checkov
        run: checkov -d . --quiet --soft-fail

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # Notify to Slack channel if it fails
      #- name: Notify slack fail
      #    if: failure()
      #    env:
      #      SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
      #    uses: voxmedia/github-action-slack-notify-build@v1
      #    with:
      #      channel: app-alerts
      #      status: FAILED
      #      color: danger




  # Deploy aws-load-balancer-controller in EKS
  # https://github.com/kubernetes-sigs/aws-load-balancer-controller/tree/main
  aws_load_balancer_controller_deployment:
    name: "Deploy aws-load-balancer-controller"
    runs-on: ubuntu-latest
    #environment: $ENVIRONMENT
    defaults:
      run:
        working-directory: aws-load-balancer-controller
    needs: [deploy_vpc_and_eks]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # Get from AWS ParameterStore the aws-load-balancer-controller IAM Role that needs to be passed to the values.yaml file, to be linked to the ServiceAccount
      # The IAM Role was created by Terraform
      - name: Get IAM Role from ParameterStore
        id: discover-lb-secgroup
        run: |
          iam_role_arn=$(aws ssm get-parameter --name "/$ENVIRONMENT/aws-load-balancer-controller-iam-role-arn" --query 'Parameter.Value' --output text)
          echo "IAM_ROLE_ARN=$iam_role_arn" >>$GITHUB_ENV

      - name: Customize values file
        run: |       
          sed "s|IAM_ROLE_ARN_CHANGEME|$IAM_ROLE_ARN|g" aws-load-ballancer-controller-values.yaml > aws-load-ballancer-controller-values-temp.yaml
          sed "s|CLUSTER_NAME_CHANGEME|$EKS_CLUSTER_NAME|g" aws-load-ballancer-controller-values-temp.yaml > aws-load-ballancer-controller-values-replaced.yaml
          cat aws-load-ballancer-controller-values-replaced.yaml

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      # https://artifacthub.io/packages/helm/aws/aws-load-balancer-controller
      - name: Deploy aws-load-balancer-controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --version $AWS_LOAD_BALANCER_CONTROLLER_CHART_VERSION \
            --values aws-load-ballancer-controller-values-replaced.yaml




  # Deploy Istio
  istio_deployment:
    name: "Deploy Istio"
    runs-on: ubuntu-latest
    #environment: $ENVIRONMENT
    defaults:
      run:
        working-directory: istio
    needs: [deploy_vpc_and_eks, aws_load_balancer_controller_deployment]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      # Get from AWS ParameterStore the SecGroup ID that should be attached to the public AWS LB
      # The SecGroup was created by Terraform
      - name: Get SecGroup from ParameterStore
        run: |
          secgroup_id=$(aws ssm get-parameter --name "/$ENVIRONMENT/public-lb-secgroup-id" --query 'Parameter.Value' --output text)
          echo "SECGROUP_ID=$secgroup_id" >>$GITHUB_ENV

      # Get from AWS ParameterStore the list of public subnets
      - name: Get public subnets from ParameterStore
        run: |
          public_subnets=$(aws ssm get-parameter --name "/$ENVIRONMENT/public-subnets" --query 'Parameter.Value' --output text)
          echo "PUBLIC_SUBNETS=$public_subnets" >>$GITHUB_ENV

      - name: Customize values file
        run: |       
          sed "s|PUBLIC_SUBNETS_CHANGEME|$PUBLIC_SUBNETS|g" istio-ingress-values.yaml > istio-ingress-values-temp.yaml
          sed "s|PUBLIC_SG_ID_CHANGEME|$SECGROUP_ID|g" istio-ingress-values-temp.yaml > istio-ingress-values-replaced.yaml
          cat istio-ingress-values-replaced.yaml

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      # https://istio.io/latest/docs/setup/install/helm/
      # https://artifacthub.io/packages/helm/istio-official/base
      # https://artifacthub.io/packages/helm/istio-official/istiod
      - name: Deploy istio base and istiod
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update
          kubectl get namespace | grep -q "^istio-system" || kubectl create namespace istio-system
          helm upgrade --install istio-base istio/base \
            --version $ISTIO_CHART_VERSION \
            -n istio-system \
            --set defaultRevision=$ISTIO_CHART_VERSION
          helm upgrade --install istiod istio/istiod \
            --version $ISTIO_CHART_VERSION \
            -n istio-system \
            --values istio-istiod-values.yaml
      
      # https://artifacthub.io/packages/helm/istio-official/gateway
      - name: Deploy istio ingress gateway
        run: |
          kubectl get namespace | grep -q "^istio-ingress" || kubectl create namespace istio-ingress
          helm upgrade --install istio-ingress istio/gateway \
            --version $ISTIO_CHART_VERSION \
            -n istio-ingress \
            --values istio-ingress-values-replaced.yaml





    